class <- c("A" = 1, "B" = 2, "C" = 3, "D" = 4 ,
"E" = 5)
trainingNonNA$classNumber <- class[trainingNonNA$classe]
newWindowNumbers <- c("no" = 0, "B" = 1)
trainingNonNA$newWindowNumber <- newWindowNumbers[trainingNonNA$new_window]
trainingNonNA.nonnumeric <- trainingNonNA[,!sapply(trainingNonNA, is.numeric)]
lapply(trainingNonNA.nonnumeric, class)
dim(trainingNonNA)
colnames(trainingNonNA)
trainingNonNA.numeric <- trainingNonNA[,sapply(trainingNonNA, is.numeric)]
trainingNonNA.numeric <- trainingNonNA[,sapply(trainingNonNA, is.numeric)]
lapply(trainingNonNA.numeric, class)
dim(trainingNonNA.numeric)
library(caret)
preProcess(trainingNonNA.numeric,method="knnimpute")
preProcess(trainingNonNA.numeric,method="knnImpute")
?preProcess(trainingNonNA.numeric,method="knnImpute")
preProc <- preProcess(trainingNonNA.numeric,method="knnImpute")
preProc
unique(trainingNonNA$amplitude_yaw_belt)
unique(trainingNonNA$amplitude_yaw_belt)
?train
modFit <- train(classe~.,data = trainingNonNA,method = "rf",preProcess =preProc)
preProcess(trainingNonNA.numeric,method="knnImpute")
?preProcess(trainingNonNA.numeric,method="knnImpute")
?nzv
nearZeroVar(trainingNonNA.numeric, saveMetrics = TRUE)
dim(trainingNonNA.numeric)
nzv <- nearZeroVar(trainingNonNA.numeric)
filteredNzvTraining <- trainingNonNA.numeric[, -nzv]
dim(filteredNzvTraining)
preProc <- preProcess(filteredNzvTraining,method="knnImpute")
preProc
colnames(filteredNzvTraining)
trainingCor <-  cor(filteredNzvTraining)
trainingCor
nzv
trainingCor <-  cor(filteredNzvTraining)
trainingCor
colnames(filteredNzvTraining)
testing <-read.csv("WtLiftingExcerciseTesting.csv",na.strings=c("NA",""))
dim(testing)
dim(trainingNonNA.numeric)
nzv <- nearZeroVar(trainingNonNA.numeric)
nzv
trainingNonNA.numeric[, nzv]
preProc <- preProcess(filteredNzvTraining,method="knnImpute")
?preProcess
hist(trainingNonNA.numeric$classNumber)
testing <-read.csv("WtLiftingExcerciseTesting.csv",na.strings=c("NA",""))
str(testin)
str(testing)
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "WtLiftingExcerciseTraining.csv", method = "curl")
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = "WtLiftingExcerciseTesting.csv", method = "curl")
training <- read.csv("WtLiftingExcerciseTraining.csv",header = TRUE,sep=",",
na.strings=c("NA","","#DIV/0!"),stringsAsFactors = FALSE)
str(training)
trainingNonNA <- training[ , !apply( training , 2 , function(x) all(is.na(x)) )]
dim(trainingNonNA)
colnames(trainingNonNA)
colnames(trainingNonNA)[colSums(is.na(trainingNonNA)) > 0]
trainingNonNA.nonnumeric <- trainingNonNA[,!sapply(trainingNonNA, is.numeric)]
lapply(trainingNonNA.nonnumeric, class)
users <- c("adelmo" = 1, "carlitos" = 2, "charles" = 3, "eurico" = 4 ,
"jeremy" = 5,"pedro"=6)
trainingNonNA$userNumber <- users[trainingNonNA$user_name]
class <- c("A" = 1, "B" = 2, "C" = 3, "D" = 4 ,
"E" = 5)
trainingNonNA$classNumber <- class[trainingNonNA$classe]
newWindowNumbers <- c("no" = 0, "B" = 1)
trainingNonNA$newWindowNumber <- newWindowNumbers[trainingNonNA$new_window]
trainingNonNA.nonnumeric <- trainingNonNA[,!sapply(trainingNonNA, is.numeric)]
lapply(trainingNonNA.nonnumeric, class)
trainingNonNA.numeric <- trainingNonNA[,sapply(trainingNonNA, is.numeric)]
lapply(trainingNonNA.numeric, class)
dim(trainingNonNA.numeric)
nzv <- nearZeroVar(trainingNonNA.numeric)
filteredNzvTraining <- trainingNonNA.numeric[, -nzv]
dim(filteredNzvTraining)
head(testing)
preProc <- preProcess(filteredNzvTraining,method="knnImpute")
x = matrix(rnorm(100),10,10)
dim(x)
x
x.missing = x > 1
dim(x.missing)
x.missing
x[x.missing] = NA
x
?kNNImpute(x, 3)
kNNImpute(x, 3)
preProcess(x,method="knnimpute")
preProc<-preProcess(x,method="knnImpute")
preProc
x
kNNImpute(x, 3)
preProc<-preProcess(x,method="knnImpute")
preProc
predict(preProc,x)
modFit <- train(classe~.,data = filteredNzvTraining,method = "rf")
modFit <- train(classNumber~.,data = filteredNzvTraining,method = "rf")
warnings()
modFit
pred <- predict(modFit,testing)
testing <-read.csv("WtLiftingExcerciseTesting.csv",na.strings=c("NA",""))
testing$userNumber <- users[testing$user_name]
pred <- predict(modFit,testing)
testingInterestedCols <- testing[,colnames(filteredNzvTraining)]
colnames(filteredNzvTraining)
testingInterestedCols <- testing[,colnames(filteredNzvTraining)]
testingInterestedCols <- testing[,colnames(filteredNzvTraining)[-123]]
dim(testingInterestedCols)
dim(filteredNzvTraining)
pred <- predict(modFit,testing)
pred <- predict(modFit,testingInterestedCols)
unique(testingInterestedCols$kurtosis_roll_belt)
testingInterestedCols <- testing[,colnames(filteredNzvTraining)[-154]]
colnames(filteredNzvTraining)
testingInterestedCols <- testing[,colnames(filteredNzvTraining)]
testingInterestedCols <- testing[,colnames(filteredNzvTraining)[-123]]
pred <- predict(modFit,testingInterestedCols)
testing <-read.csv("WtLiftingExcerciseTesting.csv",na.strings=c("NA","")
,stringsAsFactors = FALSE)
testingNonNA <- testing[ ,
!apply( testing , 2 , function(x) all(is.na(x)) )]
dim(testingNonNA)
testingNonNA <- testing[ ,
!apply( testing , 2 , function(x) all(is.na(x)) )]
testingNonNA$userNumber <- users[testingNonNA$user_name]
dim(testingNonNA)
colnames(testingNonNA)
pred <- predict(modFit,testingInterestedCols)
pred <- predict(modFit,testingNonNA)
testingInterestedCols <- testing[,colnames(filteredNzvTraining)[-123]]
colnames(filteredNzvTraining)
testingInterestedCols <- testing[,colnames(filteredNzvTraining)[-123]]
testingNonNA$userNumber <- users[testingNonNA$user_name]
str(training)
trainingNonNA <- training[ , !apply( training , 2 , function(x) all(is.na(x)) )]
colnames(trainingNonNA)[colSums(is.na(trainingNonNA)) > 0]
users <- c("adelmo" = 1, "carlitos" = 2, "charles" = 3, "eurico" = 4 ,
"jeremy" = 5,"pedro"=6)
trainingNonNA$userNumber <- users[trainingNonNA$user_name]
class <- c("A" = 1, "B" = 2, "C" = 3, "D" = 4 ,
"E" = 5)
trainingNonNA$classNumber <- class[trainingNonNA$classe]
newWindowNumbers <- c("no" = 0, "B" = 1)
trainingNonNA$newWindowNumber <- newWindowNumbers[trainingNonNA$new_window]
trainingNonNA.nonnumeric <- trainingNonNA[,!sapply(trainingNonNA, is.numeric)]
lapply(trainingNonNA.nonnumeric, class)
trainingNonNA.numeric <- trainingNonNA[,sapply(trainingNonNA, is.numeric)]
lapply(trainingNonNA.numeric, class)
dim(trainingNonNA)
x = nearZeroVar(GermanCredit, saveMetrics = TRUE
)
x = nearZeroVar(trainingNonNA, saveMetrics = TRUE)
x
preProc <- preProcess(trainingNonNA,method="knnImpute")
preProc <- preProcess(trainingNonNA.numeric,method="knnImpute")
preProc <- preProcess(trainingNonNA.numeric,method="knnImpute")
preProc <- preProcess(filteredNzvTraining,method="knnImpute")
modFit <- train(classNumber~.,data = filteredNzvTraining,method = "rf"
,preProcess = preProc)
preProc <- preProcess(filteredNzvTraining,method="knnImpute",proc = TRUE)
modFit <- train(classNumber~.,data = filteredNzvTraining,method = "rf"
,preProcess = preProc)
?train
preProc <- preProcess(filteredNzvTraining,method="bagImpute")
library(ipred)
library("ipred")
install.packages("ipred")
library("ipred")
preProc <- preProcess(filteredNzvTraining,method="bagImpute")
preProc
modFit <- train(classNumber~.,data = filteredNzvTraining,method = "rf"
,preProcess = preProc)
pred <- predict(modFit,testingNonNA)
,preProcess = preProc)
testingInterestedCols <- testing[,colnames(filteredNzvTraining)[-123]]
colnames(filteredNzvTraining)[-123]
testing <-read.csv("WtLiftingExcerciseTesting.csv",na.strings=c("NA","")
,stringsAsFactors = FALSE)
testingInterestedCols <- testing[,colnames(filteredNzvTraining)[-123]]
colnames(filteredNzvTraining)[-123]
testing$userNumber <- users[testing$user_name]
testingInterestedCols <- testing[,colnames(filteredNzvTraining)[-123]]
pred <- predict(modFit,testingInterestedCols)
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
dim(trainingNonNA.numeric)
?trainCon
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
model <- train(chd~age+alcohol+obesity+tobacco+type+ldl,method="glm")
library(caret)
model <- train(chd~age+alcohol+obesity+tobacco+type+ldl,method="glm")
model <- train(chd~age+alcohol+obesity+tobacco+type+ldl,data=trainSA,method="glm")
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm")
pred <- predict(model,testSA)
pred
model
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
miisClass
missClass(testSA$chd,pred)
pred<- predict(model,trainSA)
missClass(trainSA$chd,pred)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
colnames(olive)
model <- train(Area~.,data=olive,method="rpart")
dim(olive)
?tree
??tree
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(segmentationOriginal$Case,p=0.7,list = FALSE)
training <-segmentationOriginal[inTrain,]
dim(segmentationOriginal)
dim(training)
testing <- segmentationOriginal[-inTrain,]
dim(testing)
set.seed(125)
model <- train(Case~.,data=training,method="CART")
?cart
??cart
?lm
model <- lm(Case~.,data=training,method="CART")
model <- train(Case~.,data=training,method="rpart")
predict(model,testing)
pred <-predict(model,testing)
model
head(training)
pred <-predict(model,23000)
pred <-predict(model,TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2 )
pred
dim(pred)
dim(segmentationOriginal)
length(pred)
library(dplyr)
?filter
filter(segmentationOriginal,TotalIntench2 = 23,000 , FiberWidthCh1 = 10, PerimStatusCh1=2 )
filter(segmentationOriginal,TotalIntench2 == 23,000 , FiberWidthCh1 == 10, PerimStatusCh1==2 )
filter(segmentationOriginal,TotalIntench2 == 23,000 & FiberWidthCh1 == 10 & PerimStatusCh1==2 )
filter(segmentationOriginal,TotalIntenCh2 == 23,000 & FiberWidthCh1 == 10 & PerimStatusCh1==2 )
filter(segmentationOriginal,TotalIntenCh2 == 23000 & FiberWidthCh1 == 10 & PerimStatusCh1==2 )
source('~/Desktop/Coursera/Project2.R', echo=TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
Cre
inTrain <- CreateDataPartition(segmentationOriginal,p=0.7,list = FALSE)
inTrain <- createDataPartition(segmentationOriginal,p=0.7,list = FALSE)
source('~/Desktop/Coursera/Project2.R', echo=TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(segmentationOriginal,p=0.7,list = FALSE)
unique(segmentationOriginal$Case)
?subset(segmentationOriginal, select=)
trainData <- subset(segmentationOriginal, Case == "Train")
dim(segmentaionOriginal)
dim(segmentationOriginal)
dim(trainData)
testData <- subset(segmentationOriginal, Case == "Test")
dim(testData)
set.seed(125)
head(trainData)
model<-train(y = trainData$Class,data=trainData,method="rpart")
model<-train(trainData$Class~.,data=trainData,method="rpart")
pred<- predict(model,testData)
subset(pred,TotalIntench2 == 23,000 & FiberWidthCh1 == 10 &PerimStatusCh1=2 )
subset(pred,TotalIntench2 == 23,000 & FiberWidthCh1 == 10 &PerimStatusCh1==2 )
subset(pred,TotalIntench2 == 23000 & FiberWidthCh1 == 10 &PerimStatusCh1==2 )
colnames(pred)
model<-train(Class~.,data=trainData,method="rpart")
pred<- predict(model,testData)
dim(pred)
dim(trainData)
?train
model
pred<- predict(model,testData)
pred
length(pred)
colnames(testData)
dim(testData)
length(pred)
testData$pred <- pred
dim(testData)
?subset(testData,TotalIntench2 == 23000 & FiberWidthCh1 == 10 &PerimStatusCh1==2 )
subset(testData,TotalIntench2 == 23000 & FiberWidthCh1 == 10 &PerimStatusCh1==2, select=pred )
subset(testData,TotalIntench2 == 23000 & FiberWidthCh1 == 10 &PerimStatusCh1==2, select=c(pred) )
subset(testData,TotalIntenCh2 == 23000 & FiberWidthCh1 == 10 &PerimStatusCh1==2, select=c(pred) )
subset(testData,TotalIntenCh2 == 23000 & FiberWidthCh1 == 10 &PerimStatusCh1==2, select=pred )
a<-subset(testData,TotalIntenCh2 == 23000 & FiberWidthCh1 == 10 &PerimStatusCh1==2, select=pred )
a
a<-subset(testData,TotalIntenCh2 == 23000 & FiberWidthCh1 == 10 &PerimStatusCh1==2, select=c(pred ))
a
a<-subset(testData,TotalIntenCh2 == 23000 & FiberWidthCh1 == 10 &PerimStatusCh1==2, select=c(Class))
a
?predict(model,)
?train
?trainControl
model
temp
```
q()
install.packages("shiny")
library(shiny)
library(googleVIS)
library(googleVis)
install.packages(googleVis)
install.packages("googleVis")
install.packages(googleVis)
library(googleVis)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
?manipulate
head(airquality)
?rCharts
library(rCharts)
install.packages("rCharts")
?shiny
?dTable
??dTable
?dgamma
getmethod("dgamma")
getMethod("dgamma")
getMethod('dgamma')
getMethod(dgamma)
getS3Method("dgamma")
getMethod(colSums)
getMethod("colSums")
getS3Method("colSums")
?dgamma
showMethods("dgamma")
showMethods("colSums")
showMethods("lm")
showMethods("mean")
showMethods("predict")
showMethods("show")
?colSums
?lm
?mean
?predict
?show
?base
?colSums
?mean
?colSums
getMethod(colSums)
getMethod("colSums")
getMethod("mean")
showMethods("mean")
?base
help = "base"
library(help = "base")
showMethods("colSums")
getOption("defaultPackages")
?dgamma
?dgamma
?mean
?colSum
?colSums
?lm
?predict
?show
?dgamma
?predict
?lm
?show
show
library(help = "utils")
library(help = "stats")
?dgamma
library(help = "methods")
?dgamma
showMethod("dgamma")
library(base)
dgamma
dgamma generic
dgamma
lm
library(pyr)
library(pryr)
library(plyr)
ftype
?ftype
??ftype
install.packages("pryr")
library(pryr)
ftype(dgamma)
ftype(lm)
ftype(show)
ftype(predict)
ftype(show)
ftype(mean)
ftype(colSums)
ftype(dgamma)
ftype(lm)
lm
library(devtools)
install_github('slidify','ramnathv')
require(devtools)
install.packages(devtools)
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
library('slidify')
library(slidify)
install_github('slidify','ramnathv/slidify')
library(slidify)
shiny::runApp('Developing Data Products/shiny/Project')
faithful
airquality
state
data(state)
dim(state)
state
state
str(iris)
str(state)
library(help=”datasets”)
library(help="datasets")
data(volcano)
volcano
dim(volcano)
sunspot.year
uspop
women
?plot
library(caret)
library(doMC)
library(randomForest)
library(RANN)
download.file(
"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "WtLiftingExcerciseTraining.csv", method = "curl")
actualTrainingData <- read.csv("WtLiftingExcerciseTraining.csv",header = TRUE,
sep=",",na.strings=c("NA","","#DIV/0!"),
stringsAsFactors = FALSE)
testing <-read.csv("WtLiftingExcerciseTesting.csv",,header = TRUE,sep=",",
na.strings=c("NA","","#DIV/0!"),stringsAsFactors = FALSE)
state.x77
testing <-read.csv("WtLiftingExcerciseTesting.csv",,header = TRUE,sep=",",
na.strings=c("NA","","#DIV/0!"),stringsAsFactors = FALSE)
dim(testing)
head(testing)
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
faithful
help(faithful)
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
shiny::runApp('Developing Data Products/shiny/Project')
plot(faithful$eruptions,faithful$waiting)
plot(faithful$waiting,faithful$eruptions)
title: "ShinyProject"
author: "spidy001"
This R Markdown presentation is made interactive using Shiny. The viewers of the presentation can change the assumptions underlying what's presented and see the results immediately.
```{r, echo=TRUE}
verbatimTextOutput("prediction")
})
```{r,echo=false}
getwd()
setwd("~/Desktop/Coursera/Developing Data Products/shiny/Project/mydeck")
setwd("~/Desktop/Coursera/Developing Data Products/shiny/Project")
